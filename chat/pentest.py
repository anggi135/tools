#!/usr/bin/env python3
# Pentest Assistant (Groq + Rich) ‚Äî hacker vibes
# Gunakan hanya untuk sistem yang Anda miliki izin tertulisnya.

import os, time, random, sys, pathlib, json, datetime
from typing import List, Dict
from groq import Groq
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.text import Text

# ====== Konfigurasi ======
DEFAULT_MODEL = "llama-3.1-8b-instant"  # cepat & gratis di Groq
MAX_HISTORY = 12                        # batasi panjang riwayat agar ringan
TYPEWRITER = True                       # efek ketik
TYPEWRITER_DELAY = 0.004

SYSTEM_PROMPT = (
    "Kamu adalah asisten pentest etis berbahasa Indonesia. "
    "Gaya: ringkas, to the point, teknis, langkah-berikutnya. "
    "Selalu tekankan izin legal & keselamatan. "
    "Gunakan struktur: (1) Analisis singkat, (2) Temuan/Pola, (3) Next steps atau payload aman untuk uji di lab. "
    "Jika user menempelkan output tool (nmap/dirsearch/burp/dll), simpulkan layanan/versi/CVE indikatif tanpa mengeksekusi. "
    "Jika diminta payload, berikan proof-of-concept minimal & sertakan disclaimer tanggung jawab. "
)

ASCII_BANNERS = [
r"""
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""",
r"""
   ____            _            _           ____  ____ _____ 
  |  _ \ ___ _ __ | |_ ___  ___| |_ _   _  |  _ \|  _ \___  |
  | |_) / _ \ '_ \| __/ _ \/ __| __| | | | | |_) | |_) | / / 
  |  __/  __/ | | | ||  __/\__ \ |_| |_| | |  __/|  __/ / /  
  |_|   \___|_| |_|\__\___||___/\__|\__, | |_|   |_|   /_/   
                                     |___/                   
"""
]

# ====== Util ======
console = Console()
def banner():
    console.print(Text(random.choice(ASCII_BANNERS), style="bold green"))

def typewriter_print(text: str):
    if not TYPEWRITER:
        console.print(text)
        return
    for ch in text:
        print(ch, end="", flush=True)
        time.sleep(TYPEWRITER_DELAY if ch != "\n" else 0.002)
    print()

def read_file(path: str) -> str:
    p = pathlib.Path(path).expanduser()
    if not p.exists() or not p.is_file():
        return ""
    try:
        return p.read_text(errors="ignore")
    except Exception:
        return ""

def chunk_text(text: str, max_chars: int = 6000) -> List[str]:
    text = text.strip()
    return [text[i:i+max_chars] for i in range(0, len(text), max_chars)]

def panel_info(msg: str, title: str = "INFO", style="cyan"):
    console.print(Panel(Text(msg, style=style), title=f"[bold {style}]{title}[/bold {style}]", border_style=style))

def panel_error(msg: str):
    console.print(Panel(Text(msg, style="bold red"), title="[bold red]ERROR[/bold red]", border_style="red"))

def panel_ai(msg: str):
    console.print(Panel(Text(msg, style="bold cyan"), title="[bold cyan]AI[/bold cyan]", border_style="cyan"))

# ====== LLM Client ======
def get_client() -> Groq:
    api_key = os.getenv("GROQ_API_KEY")
    if not api_key:
        panel_error(
            "GROQ_API_KEY belum diset.\n\n"
            "Cara set di terminal:\n"
            "  export GROQ_API_KEY=\"gsk_xxx\"\n"
        )
        sys.exit(1)
    try:
        return Groq(api_key=api_key)
    except Exception as e:
        panel_error(f"Gagal inisialisasi client Groq: {e}")
        sys.exit(1)

client = get_client()
MODEL = DEFAULT_MODEL
TARGET = None
history: List[Dict[str, str]] = [{"role": "system", "content": SYSTEM_PROMPT}]

def ask_llm(user_content: str) -> str:
    prefix = f"[TARGET: {TARGET}]\n" if TARGET else ""
    messages = history[-MAX_HISTORY:] + [{"role": "user", "content": prefix + user_content}]

    try:
        resp = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.2,
            max_tokens=1024,
        )

        # ambil konten dengan cara yang sesuai SDK terbaru
        text = resp.choices[0].message.content.strip()

        # simpan ke history
        history.append({"role": "user", "content": user_content})
        history.append({"role": "assistant", "content": text})
        return text
    except Exception as e:
        return f"Gagal memanggil model: {e}"


# ====== Commands ======
HELP_TXT = """
Perintah:
  /help           - tampilkan bantuan
  /target <host>  - set target (disisipkan ke konteks)
  /analyze <file> - analisa file output (nmap, dirsearch, burp, dll)
  /paste          - mode paste multiline (akhiri dengan baris tunggal: EOF)
  /model list     - lihat model yang tersedia
  /model set <m>  - ganti model
  /clear          - bersihkan history percakapan
  /history        - tampilkan ringkasan history
  /save <file>    - simpan transkrip ke file JSON
  /exit           - keluar
"""

def cmd_model(args: List[str]):
    global MODEL
    if not args:
        panel_info(f"Model saat ini: {MODEL}")
        return
    if args[0] == "list":
        msg = (
            "- llama-3.1-8b-instant (cepat)\n"
            "- llama-3.1-70b-versatile (lebih pintar)\n"
            "- mixtral-8x7b-32768 (alternatif)"
        )
        panel_info(msg, title="MODEL")
    elif args[0] == "set" and len(args) >= 2:
        MODEL = args[1]
        panel_info(f"Model diganti ke: {MODEL}", title="MODEL")
    else:
        panel_error("Gunakan: /model list  |  /model set <name>")

def cmd_target(args: List[str]):
    global TARGET
    if not args:
        panel_info(f"Target saat ini: {TARGET or '-'}", title="TARGET")
        return
    TARGET = args[0]
    panel_info(f"Target di-set: {TARGET}", title="TARGET")

def cmd_analyze(args: List[str]):
    if not args:
        panel_error("Gunakan: /analyze <file>")
        return
    content = read_file(args[0])
    if not content:
        panel_error("File tidak ditemukan atau kosong.")
        return
    for part in chunk_text(content):
        ans = ask_llm(
            "Analisa output tool berikut. Ekstrak layanan, versi, potensi CVE, dan rekomendasi next steps.\n\n"
            + part
        )
        panel_ai(ans)

def cmd_paste():
    panel_info("Paste output di bawah ini. Akhiri dengan baris tunggal: EOF", title="PASTE")
    lines = []
    while True:
        try:
            line = input()
        except EOFError:
            break
        if line.strip() == "EOF":
            break
        lines.append(line)
    blob = "\n".join(lines).strip()
    if not blob:
        panel_error("Tidak ada data yang dipaste.")
        return
    for part in chunk_text(blob):
        ans = ask_llm(
            "Analisa output berikut dari tool pentest. Ringkas temuan dan sarankan langkah lanjut:\n\n"
            + part
        )
        panel_ai(ans)

def cmd_clear():
    global history
    history = [{"role": "system", "content": SYSTEM_PROMPT}]
    panel_info("History dibersihkan.", title="CLEAR")

def cmd_history():
    if len(history) <= 1:
        panel_info("Belum ada history percakapan.")
        return
    short = "\n".join([f"- {h['role']}: {h['content'][:60]}..." for h in history[-10:]])
    panel_info(short, title="HISTORY", style="magenta")

def cmd_save(args: List[str]):
    if not args:
        panel_error("Gunakan: /save <file>")
        return
    path = pathlib.Path(args[0]).expanduser()
    try:
        data = {
            "model": MODEL,
            "target": TARGET,
            "timestamp": datetime.datetime.now().isoformat(),
            "history": history
        }
        path.write_text(json.dumps(data, ensure_ascii=False, indent=2))
        panel_info(f"Tersimpan: {path}", title="SAVE")
    except Exception as e:
        panel_error(f"Gagal menyimpan: {e}")

# ====== Main Loop ======
def main():
    banner()
    panel_info(
        "Pentest Assistant siap. Gunakan hanya pada sistem yang Anda miliki izin tertulis.",
        title="LEGAL & ETHICS", style="yellow"
    )
    panel_info(HELP_TXT.strip(), title="HELP", style="green")

    while True:
        try:
            user = Prompt.ask("[bold green][YOU][/bold green]")
        except (EOFError, KeyboardInterrupt):
            print()
            break

        if not user.strip():
            continue

        if user.startswith("/"):
            parts = user.strip().split()
            cmd, args = parts[0].lower(), parts[1:]
            if cmd == "/help": panel_info(HELP_TXT.strip(), title="HELP", style="green")
            elif cmd == "/target": cmd_target(args)
            elif cmd == "/analyze": cmd_analyze(args)
            elif cmd == "/paste": cmd_paste()
            elif cmd == "/model": cmd_model(args)
            elif cmd == "/clear": cmd_clear()
            elif cmd == "/history": cmd_history()
            elif cmd == "/save": cmd_save(args)
            elif cmd == "/exit": break
            else: panel_error("Perintah tidak dikenal. Ketik /help")
            continue

        panel_info("AI sedang menganalisis...", title="PROCESS", style="cyan")
        answer = ask_llm(user)
        if TYPEWRITER:
            console.print(Panel(Text("", style="bold cyan"), title="[bold cyan]AI[/bold cyan]", border_style="cyan"))
            typewriter_print(Text(answer, style="bold cyan").plain)
        else:
            panel_ai(answer)

    panel_info("Keluar. Tetap etis & aman. üõ°Ô∏è", title="BYE", style="yellow")

if __name__ == "__main__":
    main()
